import React, { useContext, useEffect, useRef, useState } from "react";
import copyButton from "../img/copybutton.svg";
import ReactTextareaAutosize from "react-textarea-autosize";
import { CarModel } from "../App";
import chevron from "../img/chevron.svg";

import toast from "react-hot-toast";
import { HashLink } from "react-router-hash-link";

const MainInfo = () => {
  let {
    pageStatus,
    setPageStatus,
    input,
    setInput,
    data,
    setData,
    manufacturer,
    setManufacturer,
  } = useContext(CarModel);
  const [activeCompatibility, setActiveCompatibility] = useState(null);
  const [activeReplaces, setActiveReplaces] = useState(false);
  const [activeDesc, setActiveDes] = useState(false);
  const compRef = useRef();
  const replacesRef = useRef();
  const descRef = useRef();

  let partNumber = "";
  let replaces = "";
  let position = "";
  let description = "";
  let otherNames = "";
  let tableRows = [];
  let mas = [];
  let unicFromMas = [];
  let title = "";
  let compabilityObj = {};
  let replacesVariants = "";
  let images = [];
  let extraDes =
    'Warranty: 60 Days\n\nShipping: Free Most items ship within 24 hours of payment.\n\nMost items paid for on the weekend or holidays ship on the following business day.\n\nReturns: 30-day standard on all parts.\n\nPlease verify fitment independently prior to purchase, as the information in the "compatibility" section above is generated by eBay Motors and not from us.\n\nIf you have questions or concerns about fitment, please contact me prior to purchase. \n\nAfter you have received your product in satisfactory condition, please leave us positive feedback. If there is a problem with your purchase, do not leave neutral or negative feedback: CONTACT ME so that we can help you to resolve your issue to your satisfaction.';

  useEffect(() => {
    if (partNumber) {
      const checkIfClickedOutside = (e) => {
        if (compRef.current && !compRef.current.contains(e.target)) {
          setActiveCompatibility(null);
        }
        if (replacesRef.current && !replacesRef.current.contains(e.target)) {
          setActiveReplaces(false);
        }
        if (descRef.current && !descRef.current.contains(e.target)) {
          setActiveDes(false);
        }
      };
      document.addEventListener("click", checkIfClickedOutside);
      return () => {
        document.removeEventListener("click", checkIfClickedOutside);
      };
    }
  }, []);

  if (data !== "") {
    const parser = new DOMParser();
    const htmlDoc = parser.parseFromString(data, "text/html");

    partNumber = htmlDoc?.getElementsByClassName("list-value sku-display")[0]
      ?.innerText;
    if (!partNumber) {
      toast.error("Part number not found");
      setPageStatus("error");
      return;
    }
    replaces = htmlDoc?.getElementsByClassName("product-superseded-list")[0]
      ?.childNodes[3]?.innerText;
    position =
      htmlDoc?.getElementsByClassName("positions")[0]?.childNodes[3]?.innerText;

    otherNames =
      htmlDoc?.getElementsByClassName("also_known_as")[0]?.childNodes[3]
        ?.innerText;

    title = htmlDoc?.getElementsByClassName("product-title")[0]?.innerText;
    title = title?.split("(")[0];

    description = htmlDoc?.getElementsByClassName(
      "list-value description_body"
    )[0]?.childNodes[0]?.innerText;

    tableRows = htmlDoc?.querySelectorAll(".fitment-row");
   
    if (tableRows.length > 0) {
      for (var i = 0; i < tableRows.length; i++) {
        mas[i] = [];
        let k = 0;
        for (var j = 0; j < tableRows[i].childNodes.length; j++) {
          if (tableRows[i].childNodes[j].innerText) {
            mas[i][k] = tableRows[i].childNodes[j].innerText;
            k++;
          }
        }
      }

      mas.filter((row) => {
        if (!unicFromMas.includes(row[2])) {
          unicFromMas.push(row[2]);
        }
      });

      mas.sort(); // від цього залежить функція sortYears
      unicFromMas.map((unicModel) => {
        let yearsArr = [];
        mas.forEach((row) => {
          if (unicModel === row[2]) {
            yearsArr.push(Number(row[0].trim()));
          }
        });
        compabilityObj[unicModel] = sortYears(yearsArr);
      });

      compabilityObj = Object.keys(compabilityObj)
        .sort()
        .reduce((accumulator, key) => {
          accumulator[key] = compabilityObj[key];

          return accumulator;
        }, {});
    }

    if (replaces?.length > 0) {
      replacesVariants = generateVariationsForReplaces(replaces, partNumber);
    }

    let ul = htmlDoc?.querySelectorAll(".secondary-images");
    
    if (ul.length > 0) {
      ul[0].childNodes.forEach((li) => {
        if (li.childNodes.length > 0) {
          images.push(`https:${li.childNodes[1].attributes[4].value}`);
        }
      });
    }
    
  }
  // ця функція приймає масив років, і сортує їх в послідовності по типу 2008-2012
  function sortYears(array) {
    if (array.length === 0) return "";

    let ranges = [];
    let start = array[0];
    let end = array[0];

    for (let i = 1; i < array.length; i++) {
      if (array[i] - array[i - 1] === 1) {
        end = array[i];
      } else {
        if (start !== end) {
          ranges.push(`${start}-${end}`);
        } else {
          ranges.push(start.toString());
        }
        start = array[i];
        end = array[i];
      }
    }

    if (start !== end) {
      ranges.push(`${start}-${end}`);
    } else {
      ranges.push(start.toString());
    }

    return ranges.join(",");
  }
  function generateVariationsForReplaces(inputString, mainPartNumber) {
    let elements = inputString.split(", ");
    elements.unshift(mainPartNumber);
    let variations = [];

    if (manufacturer === "mercedes") {
      elements.forEach((element) => {
        let strippedElement = element.replace(/-/g, ""); // варіація 1
        let spacedElement = element.replace(/-/g, " "); // варіація 2

        variations.push(strippedElement); // варіація 1
        variations.push(spacedElement); // варіація 2
        variations.push(element); // варіація 3

        variations.push("A" + strippedElement); // варіація 4
        variations.push("A" + spacedElement); // варіація 5
        variations.push("A" + element); // варіація 6
      });
    } else if (manufacturer === "bmw") {
      elements.forEach((element) => {
        let strippedElement = element.replace(/-/g, ""); // варіація 1
        let spacedElement = element.replace(/-/g, " "); // варіація 2

        let shortStrippedElement = element.replace(/-/g, "").slice(-7); // варіація 4
        let shortSpacedElement = element.replace(/-/g, " ").slice(-9); // варіація 5

        variations.push(strippedElement); // варіація 1
        variations.push(spacedElement); // варіація 2
        variations.push(element); // варіація 3

        variations.push(shortStrippedElement); // варіація 4
        variations.push(shortSpacedElement); // варіація 5
      });
    }

    return variations.join(", ");
  }

  // if (!partNumber) {
  //   console.log("Please provide")
  //   setPageStatus('error');
  //   return;
  // }

  return partNumber ? (
    <div className="py-[50px] px-6">
      <div className="max-w-[1152px] mx-auto flex gap-7 flex-wrap-reverse sm:flex-nowrap">
        <div className="w-full sm:w-[25%]">
          {images?.map((image, index) => (
            <div key={index} className=" my-3 ">
              <img
                className="rounded-lg shadow-[0_0px_13px_-3px_rgba(0,0,0,0.2)]"
                src={image}
                alt="img"
              />
            </div>
          ))}
        </div>
        <div className=" w-full sm:w-[75%]">
          <div className="section">
            <h3 className="text-[36px]">{title}</h3>
            <p>
              {`Other names: ${
                manufacturer === "mercedes" ? description : otherNames
              }`}
            </p>
          </div>
          <div className="section mt-6">
            <h3 className="label">Part number</h3>
            {manufacturer === "mercedes" ? (
              <p className="whitespace-pre">{`${partNumber}   |   ${`A${partNumber.replace(
                /-/g,
                ""
              )}`}`}</p>
            ) : (
              <p className="whitespace-pre">{`${partNumber}   |   ${`${partNumber.replace(
                /-/g,
                ""
              )}`}   |   ${partNumber.replace(/-/g, "").slice(-7)}`}</p>
            )}
          </div>
          <div className="section mt-6">
            <h3 className="label">Position</h3>
            <p>{position?.length > 0 ? position : "No information"} </p>
          </div>
          <hr className="border border-gray my-12" />
          <div className="section" ref={replacesRef}>
            <h3 className="label">Replaces</h3>
            <div
              className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                activeReplaces ? " border-2" : ""
              }`}
            >
              <ReactTextareaAutosize
                className="w-[96%] outline-none resize-none"
                maxRows={6}
                defaultValue={replacesVariants}
              />
              <button
                onClick={() => {
                  navigator.clipboard.writeText(replacesVariants);
                  setActiveReplaces(true);
                  toast.success("Replaces copied");
                }}
              >
                <img src={copyButton} alt="copy"></img>
              </button>
            </div>
          </div>
          <div className="section mt-12" ref={compRef}>
            <h3 className="label">Compatibility</h3>
            <ul>
              <li className="flex gap-6 h-[38px] items-center rounded-md font-bold text-[13px]">
                <span className="min-w-[74px] pl-[24px]">№</span>
                <span className="min-w-[180px]">Model</span>
                <span className="min-w-[100px]">Years</span>
              </li>
              {Object.keys(compabilityObj).map((keyName, index) => (
                <li
                  key={index}
                  className={`flex stripped gap-6 h-[38px] items-center rounded-md text-[13px] ${
                    activeCompatibility == index ? " border-2" : ""
                  }`}
                  onClick={() => setActiveCompatibility(index)}
                >
                  <span className="min-w-[74px] pl-[24px]">{index + 1}</span>
                  <span className="min-w-[180px] font-semibold">{keyName}</span>
                  <span className="min-w-[100px]">
                    {compabilityObj[keyName]}
                  </span>
                </li>
              ))}
            </ul>
          </div>
          <div className="section mt-12 relative" ref={descRef}>
            <h3 className="label">Description</h3>
            <div
              className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                activeDesc ? " border-2" : ""
              }`}
            >
              <ReactTextareaAutosize
                className="w-[96%] outline-none resize-none whitespace-pre-line"
                maxRows={6}
                defaultValue={extraDes}
              ></ReactTextareaAutosize>
              <button
                onClick={() => {
                  navigator.clipboard.writeText(extraDes);
                  setActiveDes(true);
                  toast.success("Description copied");
                }}
              >
                <img src={copyButton} alt="copy"></img>
              </button>
            </div>
            <a
              className="hidden sm:flex justify-center items-center absolute sm:left-[-80px] sm:top-[115px] xl:left-[unset] xl:right-[-80px] xl:top-[115px] w-[48px] h-[48px] bg-black rounded-full"
              href={"/#top"}
            >
              <img src={chevron} />
            </a>
          </div>
          <div className="section mt-12">
            <div className="flex justify-end">
              <button className="bg-black py-3 px-10 rounded-lg text-white font-bold uppercase">
                save
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) : (
    ""
  );
};

export default MainInfo;
