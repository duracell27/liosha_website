import React, { useContext, useEffect, useRef, useState } from "react";
import copyButton from "../img/copybutton.svg";
import ReactTextareaAutosize from "react-textarea-autosize";
import { CarModel } from "../App";
import chevron from "../img/chevron.svg";

import toast from "react-hot-toast";
import { HashLink } from "react-router-hash-link";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faChevronUp, faClone } from "@fortawesome/free-solid-svg-icons";
import Dropdown from "./Dropdown";
import axios from "axios";

function removeDuplicates(arr) {
  // Function to normalize the string by removing dashes and spaces
  function normalize(str) {
    return str.replace(/[-\s]/g, "");
  }

  // Use a Set to track unique normalized strings
  let uniqueSet = new Set();
  let result = [];

  for (let item of arr) {
    let normalizedItem = normalize(item);
    if (!uniqueSet.has(normalizedItem)) {
      uniqueSet.add(normalizedItem);
      result.push(item);
    }
  }

  return result;
}

const MainInfo = () => {
  let {
    setPageStatus,
    data,
    manufacturer,
    dark,
    setData,
    input,
    useSecoundParser,
    setUseSecoundParser,
  } = useContext(CarModel);

  const [activeCompatibility, setActiveCompatibility] = useState(null);
  const [activeReplaces, setActiveReplaces] = useState(false);
  const [activeReplaces2, setActiveReplaces2] = useState(false);
  const [activeDesc, setActiveDes] = useState(false);
  const [highlightArray, setHighlightArray] = useState([]);
  const compRef = useRef();
  const replacesRef = useRef();
  const replacesRef2 = useRef();
  const descRef = useRef();

  let partNumber = "";
  let replaces = "";
  let position = "";
  let description = "";
  let otherNames = "";
  let tableRows = [];
  let mas = [];
  let unicFromMas = [];
  let title = "";
  let compabilityObj = {};
  let replacesVariants = "";
  let replacesVariants2 = "";
  let images = [];
  let extraDes =
    'Warranty: 60 Days\n\nShipping: Free Most items ship within 24 hours of payment.\n\nMost items paid for on the weekend or holidays ship on the following business day.\n\nReturns: 30-day standard on all parts.\n\nPlease verify fitment independently prior to purchase, as the information in the "compatibility" section above is generated by eBay Motors and not from us.\n\nIf you have questions or concerns about fitment, please contact me prior to purchase. \n\nAfter you have received your product in satisfactory condition, please leave us positive feedback. If there is a problem with your purchase, do not leave neutral or negative feedback: CONTACT ME so that we can help you to resolve your issue to your satisfaction.';

  useEffect(() => {
    if (partNumber) {
      const checkIfClickedOutside = (e) => {
        if (compRef.current && !compRef.current.contains(e.target)) {
          setActiveCompatibility(null);
        }
        if (replacesRef.current && !replacesRef.current.contains(e.target)) {
          setActiveReplaces(false);
        }
        if (replacesRef2.current && !replacesRef2.current.contains(e.target)) {
          setActiveReplaces2(false);
        }
        if (descRef.current && !descRef.current.contains(e.target)) {
          setActiveDes(false);
        }
      };
      document.addEventListener("click", checkIfClickedOutside);
      return () => {
        document.removeEventListener("click", checkIfClickedOutside);
      };
    }
  }, []);

  if (data !== "") {
    const parser = new DOMParser();
    const htmlDoc = parser.parseFromString(data, "text/html");

    partNumber = htmlDoc?.getElementsByClassName("list-value sku-display")[0]
      ?.innerText;

    if (useSecoundParser) {
      partNumber = htmlDoc?.getElementsByClassName("body-3 stock-code-text")[0]
        ?.children[0]?.innerText;

      // ?.innerText;
    }

    if (!partNumber) {
      //для бмв інший парсер
      if (manufacturer == "bmw") {
        toast("Пробую знайти на резервному сайті хоть щось...");
        axios
          .get(
            `https://parts.bmwofstratham.com/productSearch.aspx?searchTerm=${input}`
          )
          .then((res) => {
            if (res.status === 200) {
              setUseSecoundParser(true);
              setData(res.data);
              setPageStatus("mainInfo");
            } else {
              setPageStatus("error");
            }
          })
          .catch((err) => {
            setPageStatus("error");
            toast.error("Помилка отримання даних, або cors виключений");
          });
      }
      //для бмв інший парсер
      toast.error("Part number not found");
      setPageStatus("error");
      return;
    }
    replaces = htmlDoc?.getElementsByClassName("product-superseded-list")[0]
      ?.childNodes[3]?.innerText;

    if (useSecoundParser) {
      replaces = htmlDoc?.getElementsByClassName(
        "body-3 alt-stock-code-text"
      )[0]?.childNodes[0]?.innerText;
    }
    position =
      htmlDoc?.getElementsByClassName("positions")[0]?.childNodes[3]?.innerText;

    otherNames =
      htmlDoc?.getElementsByClassName("also_known_as")[0]?.childNodes[3]
        ?.innerText;

    title = htmlDoc?.getElementsByClassName("product-title")[0]?.innerText;
    title = title?.split("(")[0];

    description = htmlDoc?.getElementsByClassName(
      "list-value description_body"
    )[0]?.childNodes[0]?.innerText;

    tableRows = htmlDoc?.querySelectorAll(".fitment-row");

    if (tableRows.length > 0) {
      for (var i = 0; i < tableRows.length; i++) {
        mas[i] = [];
        let k = 0;
        for (var j = 0; j < tableRows[i].childNodes.length; j++) {
          if (tableRows[i].childNodes[j].innerText) {
            mas[i][k] = tableRows[i].childNodes[j].innerText;
            k++;
          }
        }
      }

      console.log("mas", mas);

      if (manufacturer === "mini") {
// 1. Спочатку фільтруємо та зберігаємо унікальні моделі
mas.forEach((row) => {
  const models = row[3].split(',').map(model => model.trim()); // ділимо за комою і обрізаємо пробіли
  models.forEach((model) => {
      if (!unicFromMas.includes(model)) {
          unicFromMas.push(model);
      }
  });
});

// 2. Сортуємо за моделями
unicFromMas.sort();

// 3. Для кожної унікальної моделі збираємо роки
unicFromMas.forEach((unicModel) => {
  let yearsArr = [];
  
  mas.forEach((row) => {
      const models = row[3].split(',').map(model => model.trim()); // ділимо на моделі
      if (models.includes(unicModel)) { // перевіряємо, чи є поточна модель в списку
          yearsArr.push(Number(row[0].trim())); // додаємо рік
      }
  });
  
  // Сортуємо роки
  yearsArr.sort((a, b) => a - b);

  // Формуємо діапазон років, наприклад, "2012-2015"
  if (yearsArr.length > 1) {
      compabilityObj[unicModel] = `${yearsArr[0]}-${yearsArr[yearsArr.length - 1]}`;
  } else {
      compabilityObj[unicModel] = `${yearsArr[0]}`;
  }
});

// 4. Сортуємо об'єкт за моделями
compabilityObj = Object.keys(compabilityObj)
  .sort()
  .reduce((accumulator, key) => {
      accumulator[key] = compabilityObj[key];
      return accumulator;
  }, {});
      }else{
        mas.filter((row) => {
          if (!unicFromMas.includes(row[2])) {
            unicFromMas.push(row[2]);
          }
        });
  
        mas.sort();
        unicFromMas.map((unicModel) => {
          let yearsArr = [];
          mas.forEach((row) => {
            if (unicModel === row[2]) {
              yearsArr.push(Number(row[0].trim()));
            }
          });
          compabilityObj[unicModel] = sortYears(yearsArr);
        });

        compabilityObj = Object.keys(compabilityObj)
          .sort()
          .reduce((accumulator, key) => {
            accumulator[key] = compabilityObj[key];

            return accumulator;
          }, {});
      }

       // від цього залежить функція sortYears

      //console.log("mas sort", mas);
      // для міні інше компатібіліті масив, але льоша просив повернути все наза
      // if (manufacturer === "mini") {
      //   let count = 1; // Лічильник для унікальних ключів
      //   mas.forEach((item) => {
      //     const year = item[0].trim();
      //     const models = item[3].split(",").map((model) => model.trim());

      //     models.forEach((model) => {
      //       // Створюємо унікальний ключ на основі року і лічильника
      //       compabilityObj[`${year}_${count}`] = model;
      //       count++;
      //     });
      //   });
      // } else {
        
      //}
    }

    console.log("compatibility", compabilityObj);

    // if (replaces?.length > 0) {
    replacesVariants = generateVariationsForReplaces(replaces, partNumber);
    // }

    let ul = htmlDoc?.querySelectorAll(".secondary-images");

    if (ul.length > 0) {
      ul[0].childNodes.forEach((li) => {
        if (li.childNodes.length > 0) {
          images.push(`https:${li.childNodes[1].attributes[4].value}`);
        }
      });
    }
  }
  // ця функція приймає масив років, і сортує їх в послідовності по типу 2008-2012
  function sortYears(array) {
    if (array.length === 0) return "";

    let ranges = [];
    let start = array[0];
    let end = array[0];

    for (let i = 1; i < array.length; i++) {
      if (array[i] - array[i - 1] === 1) {
        end = array[i];
      } else {
        if (start !== end) {
          ranges.push(`${start}-${end}`);
        } else {
          ranges.push(start.toString());
        }
        start = array[i];
        end = array[i];
      }
    }

    if (start !== end) {
      ranges.push(`${start}-${end}`);
    } else {
      ranges.push(start.toString());
    }

    return ranges.join(",");
  }

  function generateVariationsForReplaces(inputString, mainPartNumber, queue) {
    let elements = [];
    if (inputString?.length > 0) {
      if (useSecoundParser) {
        elements.push(...inputString?.split("; "));
      } else {
        elements.push(...inputString?.split(", "));
      }

      elements.unshift(mainPartNumber); // додаємо основний номер заміни в начало масиву
    } else {
      elements.push(mainPartNumber);
    }

    elements = removeDuplicates(elements);

    let elementsFirstPart = [];
    let elementsSecondPart = [];
    let elementsFirstPartBMW = [];
    let elementsSecondPartBMW = [];
    let elementsFirstPartMINI = [];
    let elementsSecondPartMINI = [];

    elementsFirstPart = elements.slice(0, 4);
    elementsSecondPart = elements.slice(4, 8);

    const pretending1 = elements.slice(8, 9);
    const pretending2 = elements.slice(9, 10);

    if (pretending1.length > 0) {
      if (elementsFirstPart.length + pretending1.length < 64) {
        elementsFirstPart.push(...pretending1);
      }
    }

    if (pretending2.length > 0) {
      if (elementsSecondPart.length + pretending2.length < 64) {
        elementsSecondPart.push(...pretending2);
      }
    }

    elementsFirstPartBMW = elements.slice(0, 7);
    elementsSecondPartBMW = elements.slice(7, 14);

    elementsFirstPartMINI = elements.slice(0, 5);
    elementsSecondPartMINI = elements.slice(5, 10);

    let variations = [];
    let variations2 = [];

    if (manufacturer === "mercedes") {
      elementsFirstPart.forEach((element) => {
        let strippedElement = element.replace(/-/g, ""); // варіація 1
        // let spacedElement = element.replace(/-/g, " "); // варіація 2

        // variations.push(strippedElement); // варіація 1
        // variations.push(spacedElement); // варіація 2
        // variations.push(element); // варіація 3

        variations.push("A" + strippedElement); // варіація 4
        // variations.push("A" + spacedElement); // варіація 5
        // variations.push("A" + element); // варіація 6
      });
      elementsSecondPart.forEach((element) => {
        let strippedElement = element.replace(/-/g, ""); // варіація 1
        // let spacedElement = element.replace(/-/g, " "); // варіація 2

        // variations.push(strippedElement); // варіація 1
        // variations.push(spacedElement); // варіація 2
        // variations.push(element); // варіація 3

        variations2.push("A" + strippedElement); // варіація 4
        // variations.push("A" + spacedElement); // варіація 5
        // variations.push("A" + element); // варіація 6
      });
      return { var1: variations.join(" "), var2: variations2.join(" ") };
    } else if (manufacturer === "bmw") {
      elementsFirstPartBMW.forEach((element) => {
        let strippedElement = element.replace(/-/g, ""); // варіація 1
        // let spacedElement = element.replace(/-/g, " "); // варіація 2

        // let shortStrippedElement = element.replace(/-/g, "").slice(-7); // варіація 4
        // let shortSpacedElement = element.replace(/-/g, " ").slice(-9); // варіація 5

        variations.push(strippedElement); // варіація 1
        // variations.push(spacedElement); // варіація 2
        // variations.push(element); // варіація 3

        // variations.push(shortStrippedElement); // варіація 4
        // variations.push(shortSpacedElement); // варіація 5
      });
      elementsSecondPartBMW.forEach((element) => {
        // let strippedElement = element.replace(/-/g, ""); // варіація 1
        // let spacedElement = element.replace(/-/g, " "); // варіація 2

        let shortStrippedElement = element.replace(/-/g, "").slice(-7); // варіація 4
        // let shortSpacedElement = element.replace(/-/g, " ").slice(-9); // варіація 5

        // variations.push(strippedElement); // варіація 1
        // variations.push(spacedElement); // варіація 2
        // variations.push(element); // варіація 3

        variations2.push(shortStrippedElement); // варіація 4
        // variations.push(shortSpacedElement); // варіація 5
      });
      return { var1: variations.join(" "), var2: variations2.join(" ") };
    } else if (manufacturer === "mini") {
      elementsFirstPartMINI.forEach((element) => {
        let strippedElement = element.replace(/-/g, ""); // варіація 1
        // let spacedElement = element.replace(/-/g, " "); // варіація 2

        // let shortStrippedElement = element.replace(/-/g, "").slice(-7); // варіація 4
        // let shortSpacedElement = element.replace(/-/g, " ").slice(-9); // варіація 5

        variations.push(strippedElement); // варіація 1
        // variations.push(spacedElement); // варіація 2
        // variations.push(element); // варіація 3

        // variations.push(shortStrippedElement); // варіація 4
        // variations.push(shortSpacedElement); // варіація 5
      });
      elementsSecondPartMINI.forEach((element) => {
        let strippedElement = element.replace(/-/g, ""); // варіація 1
        // let spacedElement = element.replace(/-/g, " "); // варіація 2

        //let shortStrippedElement = element.replace(/-/g, "").slice(-7); // варіація 4
        // let shortSpacedElement = element.replace(/-/g, " ").slice(-9); // варіація 5

        variations2.push(strippedElement); // варіація 1
        // variations.push(spacedElement); // варіація 2
        // variations.push(element); // варіація 3

        //variations2.push(shortStrippedElement); // варіація 4
        // variations.push(shortSpacedElement); // варіація 5
      });
      return { var1: variations.join(" "), var2: variations2.join(" ") };
    }
  }

  function workWithHighlightArray(id, type, idArr) {
    if (type === "single") {
      if (highlightArray.includes(id)) {
        setHighlightArray(highlightArray.filter((item) => item !== id));
      } else {
        setHighlightArray([...highlightArray, id]);
      }
    } else if (type === "arr") {
      // Check if all models are already in highlightArray
      const allModelsPresent = idArr.every((model) =>
        highlightArray.includes(model)
      );

      // If all models are present, remove them, otherwise add them
      if (allModelsPresent) {
        const newHighlightArray = highlightArray.filter(
          (model) => !idArr.includes(model)
        );
        setHighlightArray(newHighlightArray);
      } else {
        setHighlightArray((prevArray) => [...prevArray, ...idArr]);
      }
    }
  }

  const groupedBySeries = {};

  // Iterate through the keys of the object
  for (const model in compabilityObj) {
    // Extract the series name (e.g., "GL", "ML", "R")
    let series = null;
    if (manufacturer === "mercedes") {
      series = model.split(" ")[0];
    } else if (manufacturer === "bmw") {
      series = model[0];
    } else if (manufacturer === "mini") {
      series = model.split("_")[0];
    }

    // If the series doesn't exist in the grouped object, create an empty array for it
    if (!groupedBySeries[series]) {
      groupedBySeries[series] = [];
    }

    // Push the model and its production year range into the corresponding series array
    groupedBySeries[series].push({ [model]: compabilityObj[model] });
  }

  return partNumber ? (
    <div className="py-[50px] px-6 dark:bg-dark-bg">
      <div className="max-w-[1152px] mx-auto flex gap-7 flex-wrap-reverse sm:flex-nowrap">
        <div className="w-full sm:w-[25%]">
          {images?.map((image, index) => (
            <div key={index} className=" my-3 ">
              <img
                className="rounded-lg shadow-[0_0px_13px_-3px_rgba(0,0,0,0.2)]"
                src={image}
                alt="img"
              />
            </div>
          ))}
        </div>
        <div className=" w-full sm:w-[75%]">
          <div className="section">
            <h3 className="text-[36px] dark:text-dark-text">{title}</h3>
            <p className="dark:text-dark-text">
              {`Other names: ${
                manufacturer === "mercedes" ? description : otherNames
              }`}
            </p>
          </div>
          <div className="section mt-6">
            <h3 className="label dark:text-dark-text">Part number</h3>
            {manufacturer === "mercedes" ? (
              <p className="whitespace-pre dark:text-dark-text">{`${partNumber}   |   ${`A${partNumber.replace(
                /-/g,
                ""
              )}`}`}</p>
            ) : (
              <p className="whitespace-pre dark:text-dark-text">{`${partNumber}   |   ${`${partNumber.replace(
                /-/g,
                ""
              )}`}   |   ${partNumber.replace(/-/g, "").slice(-7)}`}</p>
            )}
          </div>
          <div className="section mt-6">
            <h3 className="label dark:text-dark-text">Position</h3>
            <p className="dark:text-dark-text">
              {position?.length > 0 ? position : "No information"}{" "}
            </p>
          </div>
          <hr className="border border-gray my-12" />

          {manufacturer === "mercedes" &&
            replacesVariants?.var1?.length > 0 && (
              <>
                <div className="section" ref={replacesRef}>
                  <h3 className="label dark:text-dark-text">
                    Replaces{" "}
                    <span className="text-sm">
                      ({replacesVariants?.var1?.length} sym)
                    </span>
                  </h3>
                  <div
                    className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                      activeReplaces ? " border-2" : ""
                    }`}
                  >
                    {" "}
                    <ReactTextareaAutosize
                      className="w-[96%] outline-none resize-none dark:bg-dark-bg dark:text-dark-text"
                      maxRows={6}
                      defaultValue={replacesVariants.var1}
                    />
                    <button
                      onClick={() => {
                        navigator.clipboard.writeText(replacesVariants.var1);
                        setActiveReplaces(true);
                        toast.success("Replaces copied");
                      }}
                    >
                      <FontAwesomeIcon
                        icon={faClone}
                        className={
                          dark ? "dark:text-dark-text" : "text-lightblack"
                        }
                      />
                    </button>
                  </div>
                </div>
              </>
            )}

          {manufacturer === "mercedes" &&
            replacesVariants?.var2?.length > 0 && (
              <>
                <div className="section mt-2" ref={replacesRef}>
                  <h3 className="label dark:text-dark-text">
                    Replaces 2{" "}
                    <span className="text-sm">
                      ({replacesVariants?.var2?.length} sym)
                    </span>
                  </h3>
                  <div
                    className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                      activeReplaces ? " border-2" : ""
                    }`}
                  >
                    {" "}
                    <ReactTextareaAutosize
                      className="w-[96%] outline-none resize-none dark:bg-dark-bg dark:text-dark-text"
                      maxRows={6}
                      defaultValue={replacesVariants.var2}
                    />
                    <button
                      onClick={() => {
                        navigator.clipboard.writeText(replacesVariants.var2);
                        setActiveReplaces2(true);
                        toast.success("Replaces copied");
                      }}
                    >
                      <FontAwesomeIcon
                        icon={faClone}
                        className={
                          dark ? "dark:text-dark-text" : "text-lightblack"
                        }
                      />
                    </button>
                  </div>
                </div>
              </>
            )}

          {manufacturer === "bmw" && replacesVariants?.var1?.length > 0 && (
            <>
              <div className="section" ref={replacesRef}>
                <h3 className="label dark:text-dark-text">Replaces</h3>
                <div
                  className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                    activeReplaces ? " border-2" : ""
                  }`}
                >
                  {" "}
                  <ReactTextareaAutosize
                    className="w-[96%] outline-none resize-none dark:bg-dark-bg dark:text-dark-text"
                    maxRows={6}
                    defaultValue={replacesVariants.var1}
                  />
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(replacesVariants.var1);
                      setActiveReplaces(true);
                      toast.success("Replaces copied");
                    }}
                  >
                    <FontAwesomeIcon
                      icon={faClone}
                      className={
                        dark ? "dark:text-dark-text" : "text-lightblack"
                      }
                    />
                  </button>
                </div>
              </div>
            </>
          )}

          {manufacturer === "bmw" && replacesVariants?.var2?.length > 0 && (
            <>
              <div className="section mt-2" ref={replacesRef}>
                <h3 className="label dark:text-dark-text">Replaces 2</h3>
                <div
                  className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                    activeReplaces ? " border-2" : ""
                  }`}
                >
                  {" "}
                  <ReactTextareaAutosize
                    className="w-[96%] outline-none resize-none dark:bg-dark-bg dark:text-dark-text"
                    maxRows={6}
                    defaultValue={replacesVariants.var2}
                  />
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(replacesVariants.var2);
                      setActiveReplaces2(true);
                      toast.success("Replaces copied");
                    }}
                  >
                    <FontAwesomeIcon
                      icon={faClone}
                      className={
                        dark ? "dark:text-dark-text" : "text-lightblack"
                      }
                    />
                  </button>
                </div>
              </div>
            </>
          )}

          {/* //////////////////////////////////////////////////////////////// */}
          {manufacturer === "mini" && replacesVariants?.var1?.length > 0 && (
            <>
              <div className="section" ref={replacesRef}>
                <h3 className="label dark:text-dark-text">
                  Replaces{" "}
                  <span className="text-sm">
                    ({replacesVariants?.var1?.length} sym)
                  </span>
                </h3>
                <div
                  className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                    activeReplaces ? " border-2" : ""
                  }`}
                >
                  {" "}
                  <ReactTextareaAutosize
                    className="w-[96%] outline-none resize-none dark:bg-dark-bg dark:text-dark-text"
                    maxRows={6}
                    defaultValue={replacesVariants.var1}
                  />
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(replacesVariants.var1);
                      setActiveReplaces(true);
                      toast.success("Replaces copied");
                    }}
                  >
                    <FontAwesomeIcon
                      icon={faClone}
                      className={
                        dark ? "dark:text-dark-text" : "text-lightblack"
                      }
                    />
                  </button>
                </div>
              </div>
            </>
          )}

          {manufacturer === "mini" && replacesVariants?.var2?.length > 0 && (
            <>
              <div className="section mt-2" ref={replacesRef}>
                <h3 className="label dark:text-dark-text">
                  Replaces 2{" "}
                  <span className="text-sm">
                    ({replacesVariants?.var2?.length} sym)
                  </span>
                </h3>
                <div
                  className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                    activeReplaces ? " border-2" : ""
                  }`}
                >
                  {" "}
                  <ReactTextareaAutosize
                    className="w-[96%] outline-none resize-none dark:bg-dark-bg dark:text-dark-text"
                    maxRows={6}
                    defaultValue={replacesVariants.var2}
                  />
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(replacesVariants.var2);
                      setActiveReplaces2(true);
                      toast.success("Replaces copied");
                    }}
                  >
                    <FontAwesomeIcon
                      icon={faClone}
                      className={
                        dark ? "dark:text-dark-text" : "text-lightblack"
                      }
                    />
                  </button>
                </div>
              </div>
            </>
          )}
          {/* //////////////////////////////////////////////////////////////// */}

          <div className="section mt-12" ref={compRef}>
            <h3 className="label dark:text-dark-text">Compatibility</h3>
            <ul>
              <li className="flex gap-6 h-[38px] items-center rounded-md font-bold text-[13px]">
                <span className="min-w-[74px] pl-[24px] dark:text-dark-text">
                  №
                </span>
                <span className="min-w-[180px] dark:text-dark-text">Model</span>
                <span className="min-w-[100px] dark:text-dark-text">Years</span>
              </li>
              {Object.keys(compabilityObj).map((keyName, index) => (
                <li
                  key={index}
                  className={`flex ${
                    dark ? " stripped-dark " : " stripped "
                  } gap-6 h-[38px] items-center text-[13px] ${
                    activeCompatibility == index ? " border-2" : ""
                  }`}
                  onClick={() => setActiveCompatibility(index)}
                >
                  <span className="min-w-[74px] pl-[24px] dark:text-dark-text">
                    {index + 1}
                  </span>
                  <span className="min-w-[180px] font-semibold dark:text-dark-text">
                    {keyName}
                  </span>
                  <span className="min-w-[100px] dark:text-dark-text">
                    {compabilityObj[keyName]}
                  </span>
                </li>
              ))}
            </ul>
          </div>

          {/* <div className="section mt-12">
            <h3 className="label dark:text-dark-text">
              Compatibility NEW (beta)
            </h3>
            {Object.keys(groupedBySeries).map((keyName, index) => (
              <Dropdown
                key={index}
                dropdownHeading={keyName}
                data={groupedBySeries[keyName]}
                highlightFn={workWithHighlightArray}
                highlightArray={highlightArray}
                manufacturer={manufacturer}
              />
            ))}
          </div> */}

          <div className="section mt-12 relative" ref={descRef}>
            <h3 className="label dark:text-dark-text">Description</h3>
            <div
              className={`p-4 shadow-[0_0px_13px_-3px_rgba(0,0,0,0.5)] rounded-lg mt-2 flex gap-[15px] items-start ${
                activeDesc ? " border-2" : ""
              }`}
            >
              <ReactTextareaAutosize
                className="w-[96%] outline-none resize-none whitespace-pre-line dark:bg-dark-bg dark:text-dark-text"
                maxRows={6}
                defaultValue={extraDes}
              ></ReactTextareaAutosize>
              <button
                onClick={() => {
                  navigator.clipboard.writeText(extraDes);
                  setActiveDes(true);
                  toast.success("Description copied");
                }}
              >
                <FontAwesomeIcon
                  icon={faClone}
                  className={dark ? "dark:text-dark-text" : "text-lightblack"}
                />
              </button>
            </div>
            <a
              className="hidden sm:flex justify-center items-center absolute sm:left-[-80px] sm:top-[115px] xl:left-[unset] xl:right-[-80px] xl:top-[115px] w-[48px] h-[48px] bg-black rounded-full text-gray dark:text-black dark:bg-dark-button-bg"
              href={"/#top"}
            >
              <FontAwesomeIcon icon={faChevronUp} />
            </a>
          </div>
          <div className="section mt-12">
            <div className="flex justify-end">
              <button className="bg-black py-3 px-10 rounded-lg text-white dark:text-black dark:bg-dark-button-bg font-bold uppercase">
                save
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) : (
    ""
  );
};

export default MainInfo;
